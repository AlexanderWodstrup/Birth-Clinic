// <auto-generated />
using System;
using Birth_Clinic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Birth_Clinic.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210414093046_initialcreate")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Birth_Clinic.Interface.ClinicRoom", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("RoomName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.HasIndex("ParentId");

                    b.ToTable("Rooms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ClinicRoom");
                });

            modelBuilder.Entity("Birth_Clinic.Interface.Clinician", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasKey("FirstName", "LastName");

                    b.HasIndex("ParentId");

                    b.ToTable("Clinicians");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Clinician");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Father", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("FirstName", "LastName");

                    b.HasIndex("ParentId")
                        .IsUnique();

                    b.ToTable("Father");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Mother", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("FirstName", "LastName");

                    b.HasIndex("ParentId")
                        .IsUnique();

                    b.ToTable("Mother");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClinicRoomRoomId")
                        .HasColumnType("int");

                    b.Property<string>("ClinicianFirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClinicianLastName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ClinicRoomRoomId");

                    b.HasIndex("ClinicianFirstName", "ClinicianLastName");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Birth_Clinic.Models.BirthRoom", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.ClinicRoom");

                    b.HasDiscriminator().HasValue("BirthRoom");
                });

            modelBuilder.Entity("Birth_Clinic.Models.MaternityRoom", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.ClinicRoom");

                    b.HasDiscriminator().HasValue("MaternityRoom");
                });

            modelBuilder.Entity("Birth_Clinic.Models.RestRoom", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.ClinicRoom");

                    b.HasDiscriminator().HasValue("RestRoom");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Doctor", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.Clinician");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Birth_Clinic.Models.MidWife", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.Clinician");

                    b.HasDiscriminator().HasValue("MidWife");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Nurse", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.Clinician");

                    b.HasDiscriminator().HasValue("Nurse");
                });

            modelBuilder.Entity("Birth_Clinic.Models.SOSU_Assistent", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.Clinician");

                    b.HasDiscriminator().HasValue("SOSU_Assistent");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Secretary", b =>
                {
                    b.HasBaseType("Birth_Clinic.Interface.Clinician");

                    b.HasDiscriminator().HasValue("Secretary");
                });

            modelBuilder.Entity("Birth_Clinic.Interface.ClinicRoom", b =>
                {
                    b.HasOne("Birth_Clinic.Models.Parent", "Parent")
                        .WithMany("ClinicRooms")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Birth_Clinic.Interface.Clinician", b =>
                {
                    b.HasOne("Birth_Clinic.Models.Parent", "Parent")
                        .WithMany("Clinicians")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Father", b =>
                {
                    b.HasOne("Birth_Clinic.Models.Parent", "Parent")
                        .WithOne("Father")
                        .HasForeignKey("Birth_Clinic.Models.Father", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Mother", b =>
                {
                    b.HasOne("Birth_Clinic.Models.Parent", "Parent")
                        .WithOne("Mother")
                        .HasForeignKey("Birth_Clinic.Models.Mother", "ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Schedule", b =>
                {
                    b.HasOne("Birth_Clinic.Interface.ClinicRoom", "ClinicRoom")
                        .WithMany("Schedules")
                        .HasForeignKey("ClinicRoomRoomId");

                    b.HasOne("Birth_Clinic.Interface.Clinician", "Clinician")
                        .WithMany("Schedules")
                        .HasForeignKey("ClinicianFirstName", "ClinicianLastName");

                    b.Navigation("Clinician");

                    b.Navigation("ClinicRoom");
                });

            modelBuilder.Entity("Birth_Clinic.Interface.ClinicRoom", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Birth_Clinic.Interface.Clinician", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Birth_Clinic.Models.Parent", b =>
                {
                    b.Navigation("Clinicians");

                    b.Navigation("ClinicRooms");

                    b.Navigation("Father");

                    b.Navigation("Mother");
                });
#pragma warning restore 612, 618
        }
    }
}
